%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                            %                     Trocq                      %
%  _______                   %        Copyright (C) 2023 Inria & MERCE        %
% |__   __|                  %     (Mitsubishi Electric R&D Centre Europe)    %
%    | |_ __ ___   ___ __ _  %        Cyril Cohen <cyril.cohen@inria.fr>      %
%    | | '__/ _ \ / __/ _` | %        Enzo Crance <enzo.crance@inria.fr>      %
%    | | | | (_) | (_| (_| | %    Assia Mahboubi <assia.mahboubi@inria.fr>    %
%    |_|_|  \___/ \___\__, | %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                        | | %   This file is distributed under the terms of  %
%                        |_| %   GNU Lesser General Public License Version 3  %
%                            % (see LICENSE file for the text of the license) %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% -----------------------------------------------------------------------------
% utility predicates
% -----------------------------------------------------------------------------

% Note: should only contain definitions available during synterp

pred do-not-fail.

kind or type -> type -> type.
type inl A -> or A B.
type inr B -> or A B.

kind verbosity type.
type level.off verbosity.
type level.info verbosity.
type level.debug verbosity.
type level.trace verbosity.

% Returns the numeric level associated to a verbosity, the higher the more verbose.
pred verbosity->int i:verbosity, o:int.
verbosity->int level.off -1.
verbosity->int level.info 0.
verbosity->int level.debug 1.
verbosity->int level.trace 2.

% Returns the verbosity level given a name.
pred string->verbosity i:string o:verbosity.
string->verbosity "off" level.off.
string->verbosity "info" level.info.
string->verbosity "debug" level.debug.
string->verbosity "trace" level.trace.

pred log-level o:verbosity.
:name "log-level"
log-level level.info.

pred logging.info i:prop.
logging.info P :- util.at-level level.info P.
pred logging.debug i:prop.
logging.debug P :- util.at-level level.debug P.
pred logging.trace i:prop.
logging.trace P :- util.at-level level.trace P.

namespace util {

pred option.value i:option A, i:A, o:A.
option.value none Default Default.
option.value (some A) _ A.

pred cmp-int o:int, o:int, o:cmp.
cmp-int A B lt :- A < B, !.
cmp-int A B eq :- A = B, !.
cmp-int _ _ gt.

pred at-level i:verbosity, i:prop.
at-level MinimumLevel Log :- log-level CurrentLevel, !,
  if ({verbosity->int CurrentLevel} >= {verbosity->int MinimumLevel}) Log true.
at-level _ _.

pred when i:prop, i:prop.
when Condition Goal :-
  if (Condition) Goal true.

pred unless i:prop, i:prop.
unless Condition Goal :-
  if (Condition) true Goal.

pred if-suspend i:A, i:prop, i:prop, i:prop.
if-suspend V B T E :- var V, !, declare_constraint (if B T E) [V].
if-suspend _ B T E :- if B T E.

pred map.find-opt i:A, i:std.map A B, o:option B.
map.find-opt K M (some V) :- std.map.find K M V, !.
map.find-opt _ _ none.

pred map.update i:A, i:(option B -> option B -> prop), i:std.map A B, o:std.map A B.
map.update K F M M' :-
  map.find-opt K M (some V), !,
  F (some V) OV',
  if (OV' = some V')
    (std.map.add K V' M M')  % replace
    (std.map.remove K M M'). % remove
map.update K F M M' :-
  F none (some V'),
  std.map.add K V' M M'.     % add
map.update _ _ M M.          % no-op

pred delete i:A, i:list A, o:list A.
delete A [A|Xs] Xs :- !.
delete A [X|Xs] [X|Xs'] :- delete A Xs Xs'.
delete _ [] [].

% Elpi does not allow replacing a named clause with a named clause. This is not allowed:
%   coq.elpi.accumulate Scope Database (clause ClauseName (replace ClauseName) Content)
% (read the explanation: https://github.com/LPCIC/elpi/blob/62d3f0c311206cb4b0cf033c34fca8336c61822e/ELPI.md?plain=1#L281)
% This utility predicate emulates this feature.
% However it does not solve the fundamental issue that lead Elpi to forbid
% this, so one has to be cautious when using it.
pred accumulate-replacing-named-clause i:scope, i:id, i:id, i:prop.
accumulate-replacing-named-clause Scope Database ClauseName Content :-
  GraftingPoint is ClauseName ^ "-temporary-grafting-point",
  coq.elpi.accumulate Scope Database (clause GraftingPoint (after ClauseName) Content),
  coq.elpi.accumulate Scope Database (clause _ (remove ClauseName) Content),
  coq.elpi.accumulate Scope Database (clause ClauseName (before GraftingPoint) Content),
  coq.elpi.accumulate Scope Database (clause _ (remove GraftingPoint) Content).

} % util

pred std.string.list->set i:list string, o:std.string.set.
std.string.list->set [] Empty :- std.string.set.empty Empty.
std.string.list->set [S|Rest] Set :-
  std.string.set.add S {std.string.list->set Rest} Set.
