%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                            %                     Trocq                      %
%  _______                   %        Copyright (C) 2023 Inria & MERCE        %
% |__   __|                  %     (Mitsubishi Electric R&D Centre Europe)    %
%    | |_ __ ___   ___ __ _  %        Cyril Cohen <cyril.cohen@inria.fr>      %
%    | | '__/ _ \ / __/ _` | %        Enzo Crance <enzo.crance@inria.fr>      %
%    | | | | (_) | (_| (_| | %    Assia Mahboubi <assia.mahboubi@inria.fr>    %
%    |_|_|  \___/ \___\__, | %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                        | | %   This file is distributed under the terms of  %
%                        |_| %   GNU Lesser General Public License Version 3  %
%                            % (see LICENSE file for the text of the license) %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% -----------------------------------------------------------------------------
% utility predicates related to Rocq
% -----------------------------------------------------------------------------

% Some of the Coq native predicates raise errors in Elpi, stopping all
% ongoing computations. Adding a custom flag like do-not-fail gives us an
% extra catch-all case in the native predicate, when this flag is active,
% meaning the predicate will just not succeed, instead of raising an error.
:before "term->gref:fail"
coq.term->gref _ _ :- do-not-fail, !, false.

% subst-gref T GR' T'
% substitutes GR for GR' in T if T = (global GR) or (pglobal GR I)
pred subst-gref i:term, i:gref, o:term.
subst-gref (global _) GR' Tm' :- !, coq.env.global GR' Tm'.
subst-gref (pglobal _ I) GR' Tm' :- !,
  @uinstance! I => coq.env.global GR' Tm'.
subst-gref T _ _ :- coq.error T "is not a gref".

pred subst-univ i:univ, i:term, o:term.
subst-univ U T T' :-
  coq.univ.variable U L,
  coq.univ-instance UI [L],
  ((copy (sort (typ _)) (sort (typ U)) :- !),
   (pi x\ copy (pglobal x _) (pglobal x UI) :- !)) => copy T T'.

pred coq.gref.list->string-map i:list gref, o:std.string.map gref.
coq.gref.list->string-map [] Empty :- std.string.map.empty Empty.
coq.gref.list->string-map [GR|Rest] Map :-
  std.string.map.add {coq.gref->id GR} GR {coq.gref.list->string-map Rest} Map.

pred coq.gref.string-map.domain o:std.string.map gref, o:std.string.set.
coq.gref.string-map.domain Map Set :- std.do! [
  std.string.map.bindings Map Bindings,
  std.map Bindings (b\ out\ b = pr out _) Names,
  std.string.list->set Names Set
].

namespace util {

pred argument->gref i:argument, o:gref.
argument->gref (str S) GR :- coq.locate S GR.
argument->gref (trm T) GR :- coq.term->gref T GR.

% named-coe Rec1 Rec2 Coe Depth
% builds a function from (p?global (indt Rec1)) to (p?global (indt Rec1))
% assuming
% - Rec1 and Rec2 are records with the same parameters
% - all projections in Rec2 are named,
% - if Proj2 projection with name Name in Rec2
%   there is a projection Proj1 with the same name Name
%   and a coercion from Proj1 to Proj2.
% - Depth is the number of (common) parameters between Rec1 and Rec2.
% Limitation: GR1 and GR2 have exactly one universe.

pred named-coe i:gref, i:gref, o:term, o:int.
named-coe GR1 GR2 Coe Depth :-
  GR1 = indt Rec1, GR2 = indt Rec2, !,
  std.do! [
    coq.env.projections Rec1 OptProjs1,
    coq.env.projections Rec2 OptProjs2,
    std.map OptProjs1 (op\ gr\ sigma P\ op = some P, gr = const P) Projs1,
    std.map OptProjs2 (op\ gr\ sigma P\ op = some P, gr = const P) Projs2,
    coq.gref.list->string-map Projs1 ProjMap1,
    coq.gref.list->string-map Projs2 ProjMap2,
    coq.gref.string-map.domain ProjMap1 NameSet1,
    coq.gref.string-map.domain ProjMap2 NameSet2,
    std.assert! (std.string.set.subset NameSet2 NameSet1)
      "The second record names is not a subset of the first one names",
    coq.env.indt Rec1 _ _ _ Ty1 _ _,
    coq.env.indt Rec2 _ _ _ _   [Build2] _,
    named-coe.rec (indt Rec1) ProjMap1 Projs2 [] (indc Build2) Ty1 Coe Depth
  ].
named-coe Rec1 Rec2 _ _ :-
  coq.error "Either of the following are not records: " Rec1 Rec2.

pred named-coe.rec i:gref, i:std.string.map gref, i:list gref, i:list term,
  i:gref, i:term, o:term, o:int.
named-coe.rec SrcTy ProjMap1 Projs2 RevCommonArgs Build
    (prod N A B) (fun N A Coe) NewDepth :-
  @pi-decl N A x\
    named-coe.rec SrcTy ProjMap1 Projs2
      [x|RevCommonArgs] Build (B x) (Coe x) Depth,
    NewDepth is Depth + 1.

named-coe.rec SrcTy ProjMap1 Projs2 RevCommonArgs Build _
    (fun `src` SrcTyArgs Coe) 0 :- !,
  std.rev RevCommonArgs CommonArgs,
  coq.mk-app {coq.env.global SrcTy} CommonArgs SrcTyArgs,
  @pi-decl `src` SrcTyArgs src\
      sigma CommonArgsSrc Projs1 Args \ std.do! [
    std.append CommonArgs [src] CommonArgsSrc,
    std.map Projs2 (p\ out\ sigma Name\ coq.gref->id p Name,
      std.string.map.find Name ProjMap1 out) Projs1,
    std.map Projs1 (p\ out\ sigma T\ coq.env.global p T,
      coq.mk-app T CommonArgsSrc out) Args,
    coq.mk-app {coq.env.global Build} {std.append CommonArgs Args} (Coe src)
  ].

pred add-named-coe i:id, i:gref, i:gref, o:constant.
add-named-coe Name GR1 GR2 C :-
  coq.env.univpoly? GR1 NU1,
  coq.env.univpoly? GR2 NU2,
  NU1 = NU2, NU1 = 1, !, std.do! [
    named-coe GR1 GR2 CoeSkel Depth,
    std.assert-ok! (coq.elaborate-skeleton CoeSkel _CoeWUTy CoeWU)
        "ill-typed coercion",
    coq.univ.new U,
    coq.univ.variable U L,
    subst-univ U CoeWU Coe,
    @keepunivs! ==> std.assert-ok! (coq.typecheck Coe CoeTy) "wrong universes",
    @udecl! [L] ff [] tt => coq.env.add-const Name Coe CoeTy @transparent! C,
    @global! => coq.coercion.declare
      (coercion (const C) Depth GR1 (grefclass GR2))
  ].
add-named-coe _ GR1 GR2 _ :-
  coq.error GR1 "and" GR2 "do not have the same number of universe variables, or is different from 1".

} % util
